use crate::LOGO;

pub fn create(namespace: &str, artifact_id: &str) {
    println!("{}", LOGO);
    /* ---------------------------------------------------------------------------------------------

    /.gitignore
    /README.md
    /libs/
    /src/
        - /java/main/<namespace>/<artifactId.java>
    /grind.yml

    --------------------------------------------------------------------------------------------- */
    self::create_project_dir(artifact_id);
    self::create_libs_dir(artifact_id);
    self::create_gitignore_file(artifact_id);
    self::create_readme_file(artifact_id);

    self::create_src_and_namespace(namespace, artifact_id);
    self::create_java_file(namespace, artifact_id);
    self::create_grind_file(namespace, artifact_id);

    println!();
    println!("ðŸŽ‰ðŸŽ‰ created project {}/ successfully!", artifact_id);
}

fn create_project_dir(artifact_id: &str) {
    std::fs::create_dir_all(artifact_id).unwrap();
    println!("==> created project directory [{}/]", artifact_id);
}

fn create_gitignore_file(artifact_id: &str) {
    let gitignore: &str = r#"libs/*
target/*
build/*
cache/*
plugins/*
reports/*
"#;
    std::fs::write(format!("{}/.gitignore", artifact_id), gitignore).unwrap();
    println!("==> created .gitignore file");
}

fn create_readme_file(artifact_id: &str) {
    let readme: &str = r#"# <ARTIFACT_ID>

This is a skeleton generated by `grind` tool, update and add your intro!

## How to compile

first make sure all the dependencies are installed:

```shell
$ grind install
```

And then you can build your project with the follwoing command:

```shell
$ grind build
```

"#;

    let readme = readme.replace("<ARTIFACT_ID>", artifact_id);

    std::fs::write(format!("{}/README.md", artifact_id), readme).unwrap();
    println!("==> created README.md file");
}

fn create_libs_dir(artifact_id: &str) {
    std::fs::create_dir_all(format!("{}/libs", artifact_id)).unwrap();
    println!("==> created libs [{}/libs]", artifact_id);
}

fn create_src_and_namespace(namespace: &str, artifact_id: &str) {
    let packages = namespace.replace(".", "/");
    std::fs::create_dir_all(format!("{}/src/main/java/{}", artifact_id, packages)).unwrap();
    std::fs::create_dir_all(format!("{}/src/main/resources", artifact_id)).unwrap();
    println!(
        "==> created packages [{}/src/main/java/{}]",
        artifact_id, packages
    );
}

fn create_java_file(namespace: &str, artifact_id: &str) {
    let main_class = r#"package <GROUP_ID>;

public class <ARTIFACT_ID> {
    public static void main(String[] args) {
        System.out.println("Hello, world from grind!");
    }
}    
"#;
    let main_class = main_class.replace("<ARTIFACT_ID>", artifact_id).replace("<GROUP_ID>", namespace);
    let packages = namespace.replace(".", "/");
    std::fs::write(
        format!(
            "{}/src/main/java/{}/{}.java",
            artifact_id, packages, artifact_id
        ),
        main_class,
    )
    .unwrap();
    println!("==> created main java class file");
}

fn create_grind_file(namespace: &str, artifact_id: &str) {
    let grind: &str = r#"project:
  groupId: "<NAMESPACE>"
  artifactId: "<ARTIFACT_ID>"
  version: "1.0.0"
  name: "My App"
  description: "Update me!"

  dependencies:      
    - groupId: "junit"
      artifactId: "junit"
      version: "4.13.2"
      scope: "test"

  tasks:
    clean: "rm -rf target/"
    
"#;
    let grind = grind
        .replace("<NAMESPACE>", namespace)
        .replace("<ARTIFACT_ID>", artifact_id);
    std::fs::write(format!("{}/grind.yml", artifact_id), grind).unwrap();
    println!("==> created grind.yml file");
}
